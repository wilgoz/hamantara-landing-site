---
import { Image } from "astro:assets";
import trayaU905 from "../assets/ultrafiltration/Traya-U-90-5.png";
import trayaU902 from "../assets/ultrafiltration/Traya+U-90-2.png";
import traya1PU905 from "../assets/ultrafiltration/Traya-1P.U-90-5.png";
import trayaU1508 from "../assets/ultrafiltration/Traya-U-150-8-Rev-3.png";

const ultraProducts = [
  {
    image: trayaU905,
    title: "TRAYA U-90-5",
    length: "900",
    diameter: "80",
    poreSize: "0.02 - 0.1 micron",
  },
  {
    image: trayaU902,
    title: "TRAYA U-90-2",
    length: "900",
    diameter: "50",
    poreSize: "0.02 - 0.1 micron",
  },
  {
    image: traya1PU905,
    title: "TRAYA 1P U-90-5",
    length: "900",
    diameter: "80",
    poreSize: "0.02 - 0.1 micron",
  },
  {
    image: trayaU1508,
    title: "TRAYA U-150-8",
    length: "1500",
    diameter: "80",
    poreSize: "0.02 - 0.1 micron",
  },
];
---

<section
  id="hero"
  class="relative bg-gradient-to-br from-primary-dark via-primary to-primary-light pt-32 pb-16 md:pt-48 md:pb-24 overflow-hidden"
>
  <div class="container-custom relative z-10">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
      <div class="animate-fade-in">
        <div class="flex items-center mb-6">
          <div class="h-px w-12 bg-white/30"></div>
          <span
            class="mx-4 text-white/80 font-light text-sm uppercase tracking-widest"
            >PT. Handal Prima Nusantara</span
          >
        </div>

        <h1
          class="text-4xl md:text-5xl lg:text-6xl font-bold text-white leading-tight mb-8"
        >
          <span class="block font-light mb-2">Discover</span>
          <span
            class="bg-clip-text text-transparent bg-gradient-to-r from-white via-white to-white/80"
            >Premium Water Filtration</span
          >
          <span class="relative inline-block">
            <span class="relative z-10">Solutions</span>
            <span
              class="absolute bottom-2 left-0 w-full h-3 bg-secondary/20 -z-0"
            ></span>
          </span>
        </h1>

        <p
          class="text-lg md:text-xl text-white/90 mb-10 max-w-lg font-light leading-relaxed border-l-2 border-accent/60 pl-4"
        >
          Clean, safe water for your home, business, and emergency needs with
          cutting-edge ultrafiltration membrane technology.
        </p>

        <div class="flex flex-col sm:flex-row gap-5">
          <a
            href="#products"
            class="btn bg-white text-primary hover:bg-neutral-50 transition-all shadow-lg shadow-primary-dark/20 flex items-center"
          >
            <span>Explore Products</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 ml-2"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z"
                clip-rule="evenodd"></path>
            </svg>
          </a>
          <a
            href="#contact"
            class="btn bg-transparent border border-white/30 backdrop-blur-sm text-white hover:bg-white/10 transition-all group"
          >
            <span>Contact Us</span>
            <span
              class="ml-2 group-hover:translate-x-1 transition-transform duration-300"
              >→</span
            >
          </a>
        </div>
      </div>

      <div class="hidden lg:block relative">
        <!-- Product Carousel Container -->
        <div
          class="relative w-full h-[540px] p-[1px] rounded-2xl backdrop-blur-sm overflow-hidden"
        >
          <!-- Animated border gradient -->
          <div
            class="absolute inset-0 bg-gradient-to-br from-white/30 via-primary-light/50 to-secondary/30 rounded-2xl"
          >
          </div>

          <!-- Carousel Container -->
          <div
            class="absolute inset-[1px] bg-white/10 rounded-2xl backdrop-blur-md border border-white/20 overflow-hidden"
          >
            <!-- Carousel Images -->
            <div id="carousel-container" class="relative w-full h-full">
              {
                ultraProducts.map((product, index) => (
                  <div
                    class={`carousel-slide absolute inset-0 transition-opacity duration-500 ${index === 0 ? "opacity-100" : "opacity-0"}`}
                    data-slide={index}
                  >
                    <Image
                      src={product.image}
                      alt={`${product.title} Ultrafiltration Membrane - ${product.length}mm x ${product.diameter}mm with ${product.poreSize} filtration capability`}
                      class="w-full h-4/5 object-contain object-center p-8 pt-12"
                      loading={index === 0 ? "eager" : "lazy"}
                      width={500}
                      height={500}
                    />

                    {/* Overlay for text legibility */}
                    <div class="absolute bottom-0 left-0 right-0 h-1/2 bg-gradient-to-t from-primary-dark/70 to-transparent" />

                    {/* Product information overlay */}
                    <div class="absolute bottom-0 left-0 right-0 p-4 backdrop-blur-sm bg-gradient-to-t from-primary-dark/80 to-transparent">
                      <h3 class="text-white text-lg font-medium mb-2 tracking-wide">
                        {product.title}
                      </h3>
                      <div class="h-[1px] w-12 bg-white/30 mb-3" />

                      <div class="flex items-center justify-between gap-4">
                        {/* Dimensions (Length & Diameter together)  */}
                        <div class="flex items-center">
                          <div class="w-8 h-8 rounded-full bg-white/10 flex items-center justify-center mr-2">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              class="h-4 w-4 text-white/80"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="1.5"
                                d="M4 6h16M4 10h16M4 14h16M4 18h16"
                              />
                            </svg>
                          </div>
                          <div>
                            <span class="text-xs text-white/70 uppercase">
                              Dimensions
                            </span>
                            <p class="text-white font-medium text-sm">
                              {product.length} × {product.diameter} mm
                            </p>
                          </div>
                        </div>

                        {/* Pore Size */}
                        <div class="flex items-center">
                          <div class="w-8 h-8 rounded-full bg-white/10 flex items-center justify-center mr-2">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              class="h-4 w-4 text-white/80"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="1.5"
                                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                              />
                            </svg>
                          </div>
                          <div>
                            <span class="text-xs text-white/70 uppercase">
                              Pore Size
                            </span>
                            <p class="text-white font-medium text-sm">
                              {product.poreSize}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))
              }
            </div>

            <!-- Carousel Controls -->
            <button
              id="prev-btn"
              class="absolute left-4 top-1/2 -translate-y-1/2 w-12 h-12 rounded-full bg-black/40 backdrop-blur-sm flex items-center justify-center text-white hover:bg-black/60 transition-all duration-300 z-10"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>

            <button
              id="next-btn"
              class="absolute right-4 top-1/2 -translate-y-1/2 w-12 h-12 rounded-full bg-black/40 backdrop-blur-sm flex items-center justify-center text-white hover:bg-black/60 transition-all duration-300 z-10"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 5l7 7-7 7"></path>
              </svg>
            </button>

            <!-- Carousel Indicators -->
            <div
              class="absolute bottom-20 left-1/2 -translate-x-1/2 flex space-x-2 z-10"
            >
              {
                ultraProducts.map((_, index) => (
                  <button
                    class={`carousel-indicator w-3 h-3 rounded-full border border-white/30 transition-all duration-300 ${index === 0 ? "bg-white" : "bg-white/20"}`}
                    data-slide={index}
                  />
                ))
              }
            </div>

            <!-- Radial Progress Indicator -->
            <div class="absolute top-4 right-4 z-20 w-6 h-6">
              <svg class="w-full h-full" viewBox="0 0 36 36">
                <circle
                  cx="18"
                  cy="18"
                  r="16"
                  fill="none"
                  stroke="rgba(255,255,255,0.1)"
                  stroke-width="2"></circle>
                <circle
                  id="carousel-radial-progress"
                  cx="18"
                  cy="18"
                  r="16"
                  fill="none"
                  stroke="rgba(255,255,255,0.7)"
                  stroke-width="2"
                  stroke-dasharray="100 100"
                  stroke-dashoffset="100"
                  stroke-linecap="round"
                  transform="rotate(-90 18 18)"
                  class="transition-all duration-200 ease-linear"></circle>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="absolute top-0 right-0 w-full h-full overflow-hidden z-0">
    <div
      class="absolute top-0 right-0 w-1/2 h-1/2 bg-white/5 rounded-bl-full transform rotate-45 translate-x-1/2 -translate-y-1/4"
    >
    </div>
    <div
      class="absolute bottom-0 left-0 w-full h-24 bg-gradient-to-t from-white/5 to-transparent"
    >
    </div>
    <div class="absolute bottom-0 left-0 w-full">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 1440 320"
        class="w-full h-auto text-white/5 translate-y-1/2"
      >
        <path
          fill="currentColor"
          fill-opacity="1"
          d="M0,128L48,149.3C96,171,192,213,288,208C384,203,480,149,576,154.7C672,160,768,224,864,218.7C960,213,1056,139,1152,122.7C1248,107,1344,149,1392,170.7L1440,192L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"
        ></path>
      </svg>
    </div>
  </div>
</section>

<script>
  // Carousel functionality
  document.addEventListener("DOMContentLoaded", () => {
    // Cache DOM elements
    const slides = document.querySelectorAll(".carousel-slide");
    const indicators = document.querySelectorAll(".carousel-indicator");
    const nextBtn = document.getElementById("next-btn");
    const prevBtn = document.getElementById("prev-btn");
    const carousel = document.getElementById("carousel-container");
    const radialProgress = document.getElementById("carousel-radial-progress");

    // Constants and state
    const totalSlides = slides.length;
    const slideInterval = 5000; // 5 seconds per slide

    let currentSlide = 0;
    let autoPlayTimer: ReturnType<typeof setTimeout> | null = null;
    let progressTimer: any = null; // Will hold requestAnimationFrame ID
    let progress = 0; // 0-100 progress percentage

    function showSlide(index: number) {
      // Update slides visibility
      slides.forEach((slide, i) => {
        const isActive = i === index;
        slide.classList.toggle("opacity-0", !isActive);
        slide.classList.toggle("opacity-100", isActive);
      });

      // Update indicators
      indicators.forEach((indicator, i) => {
        indicator.classList.toggle("bg-white", i === index);
        indicator.classList.toggle("bg-white/20", i !== index);
      });

      currentSlide = index;

      startProgress(0);
    }

    // Progress indicator control
    function startProgress(initialValue = 0) {
      // Clear any existing timer
      if (progressTimer) {
        cancelAnimationFrame(progressTimer as unknown as number);
        progressTimer = null;
      }

      // Set initial state
      progress = initialValue;
      let lastTimestamp = performance.now();
      updateProgressDisplay();

      function updateFrame(timestamp: number) {
        // Calculate time elapsed since last frame
        const elapsed = timestamp - lastTimestamp;
        lastTimestamp = timestamp;

        // Update progress based on elapsed time
        progress = Math.min(100, progress + (100 * elapsed) / slideInterval);
        updateProgressDisplay();

        // Continue animation or stop when complete
        if (progress < 100) {
          progressTimer = requestAnimationFrame(
            updateFrame
          ) as unknown as ReturnType<typeof setInterval>;
        } else {
          progressTimer = null;
        }
      }

      // Start the animation loop
      progressTimer = requestAnimationFrame(
        updateFrame
      ) as unknown as ReturnType<typeof setInterval>;
    }

    // Convert progress (0-100) to stroke-dashoffset (100-0)
    function updateProgressDisplay() {
      if (radialProgress) {
        radialProgress.style.strokeDashoffset = (100 - progress).toString();
      }
    }

    // Navigation functions
    function nextSlide() {
      showSlide((currentSlide + 1) % totalSlides);
    }
    function prevSlide() {
      showSlide((currentSlide - 1 + totalSlides) % totalSlides);
    }

    // Auto-play control
    function autoPlay(action: "start" | "pause" | "resume") {
      // Clear existing timers
      if (autoPlayTimer) {
        clearTimeout(autoPlayTimer);
        autoPlayTimer = null;
      }

      switch (action) {
        case "start":
          startProgress(0);
          autoPlayTimer = setTimeout(() => {
            nextSlide();
            autoPlayTimer = setInterval(nextSlide, slideInterval);
          }, slideInterval);
          break;

        case "pause":
          if (progressTimer) {
            cancelAnimationFrame(progressTimer as unknown as number);
            progressTimer = null;
          }
          break;

        case "resume":
          startProgress(progress);

          // Schedule next slide based on remaining time
          const remainingTime = ((100 - progress) * slideInterval) / 100;
          autoPlayTimer = setTimeout(() => {
            nextSlide();
            autoPlayTimer = setInterval(nextSlide, slideInterval);
          }, remainingTime);
          break;
      }
    }

    // Event listeners
    if (nextBtn) {
      nextBtn.addEventListener("click", () => {
        autoPlay("pause");
        nextSlide();
        autoPlay("start");
      });
    }

    if (prevBtn) {
      prevBtn.addEventListener("click", () => {
        autoPlay("pause");
        prevSlide();
        autoPlay("start");
      });
    }

    // Indicator click handlers
    indicators.forEach((indicator, index) => {
      indicator.addEventListener("click", () => {
        autoPlay("pause");
        showSlide(index);
        autoPlay("start");
      });
    });

    // Pause/resume on hover
    if (carousel) {
      carousel.addEventListener("mouseenter", () => autoPlay("pause"));
      carousel.addEventListener("mouseleave", () => autoPlay("resume"));
    }

    // Start the carousel
    showSlide(0);
    autoPlay("start");
  });
</script>
